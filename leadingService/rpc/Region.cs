// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: region.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Leading.Services {

  /// <summary>Holder for reflection information generated from region.proto</summary>
  public static partial class RegionReflection {

    #region Descriptor
    /// <summary>File descriptor for region.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RegionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxyZWdpb24ucHJvdG8SEExlYWRpbmcuU2VydmljZXMiKgoZRmluZFJlZ2lv",
            "bnNCeUxldmVsUmVxdWVzdBINCgVsZXZlbBgBIAEoBSJGChpGaW5kUmVnaW9u",
            "c0J5TGV2ZWxSZXNwb25zZRIoCgZyZWdpb24YASADKAsyGC5MZWFkaW5nLlNl",
            "cnZpY2VzLlJlZ2lvbiJlCgZSZWdpb24SCgoCaWQYASABKAUSDAoEY29kZRgC",
            "IAEoCRISCgpwYXJlbnRDb2RlGAMgASgJEgwKBG5hbWUYBCABKAkSDQoFbGV2",
            "ZWwYBSABKAUSEAoIY29kZVR5cGUYBiABKAUiFwoVRmluZEFsbFJlZ2lvbnNS",
            "ZXF1ZXN0IkIKFkZpbmRBbGxSZWdpb25zUmVzcG9uc2USKAoGcmVnaW9uGAEg",
            "AygLMhguTGVhZGluZy5TZXJ2aWNlcy5SZWdpb24i7wEKB0FkZHJlc3MSCgoC",
            "aWQYASABKAUSFAoMcHJvdmluY2VDb2RlGAIgASgJEhQKDHByb3ZpbmNlTmFt",
            "ZRgDIAEoCRIQCghjaXR5Q29kZRgEIAEoCRIQCghjaXR5TmFtZRgFIAEoCRIU",
            "CgxkaXN0cmljdENvZGUYBiABKAkSFAoMZGlzdHJpY3ROYW1lGAcgASgJEg4K",
            "BnN0cmVldBgIIAEoCRILCgN6aXAYCSABKAkSGAoQY29udGFjdFRlbGVwaG9u",
            "ZRgKIAEoCRITCgtjb250YWN0TmFtZRgLIAEoCRIQCghjb2RlVHlwZRgMIAEo",
            "CSIiChRSZW1vdmVBZGRyZXNzUmVxdWVzdBIKCgJpZBgBIAEoBSInChVSZW1v",
            "dmVBZGRyZXNzUmVzcG9uc2USDgoGc3RhdHVzGAEgASgFIisKGUZpbmRSZWdp",
            "b25zQnlTa3VJZFJlcXVlc3QSDgoGc2t1X2lkGAEgASgFIkYKGkZpbmRSZWdp",
            "b25zQnlTa3VJZFJlc3BvbnNlEigKBnJlZ2lvbhgBIAMoCzIYLkxlYWRpbmcu",
            "U2VydmljZXMuUmVnaW9uMsYECg1SZWdpb25TZXJ2aWNlEm8KEkZpbmRSZWdp",
            "b25zQnlMZXZlbBIrLkxlYWRpbmcuU2VydmljZXMuRmluZFJlZ2lvbnNCeUxl",
            "dmVsUmVxdWVzdBosLkxlYWRpbmcuU2VydmljZXMuRmluZFJlZ2lvbnNCeUxl",
            "dmVsUmVzcG9uc2USYwoORmluZEFsbFJlZ2lvbnMSJy5MZWFkaW5nLlNlcnZp",
            "Y2VzLkZpbmRBbGxSZWdpb25zUmVxdWVzdBooLkxlYWRpbmcuU2VydmljZXMu",
            "RmluZEFsbFJlZ2lvbnNSZXNwb25zZRJFCg1DcmVhdGVBZGRyZXNzEhkuTGVh",
            "ZGluZy5TZXJ2aWNlcy5BZGRyZXNzGhkuTGVhZGluZy5TZXJ2aWNlcy5BZGRy",
            "ZXNzEkUKDVVwZGF0ZUFkZHJlc3MSGS5MZWFkaW5nLlNlcnZpY2VzLkFkZHJl",
            "c3MaGS5MZWFkaW5nLlNlcnZpY2VzLkFkZHJlc3MSYAoNUmVtb3ZlQWRkcmVz",
            "cxImLkxlYWRpbmcuU2VydmljZXMuUmVtb3ZlQWRkcmVzc1JlcXVlc3QaJy5M",
            "ZWFkaW5nLlNlcnZpY2VzLlJlbW92ZUFkZHJlc3NSZXNwb25zZRJvChJGaW5k",
            "UmVnaW9uc0J5U2t1SWQSKy5MZWFkaW5nLlNlcnZpY2VzLkZpbmRSZWdpb25z",
            "QnlTa3VJZFJlcXVlc3QaLC5MZWFkaW5nLlNlcnZpY2VzLkZpbmRSZWdpb25z",
            "QnlTa3VJZFJlc3BvbnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindRegionsByLevelRequest), global::Leading.Services.FindRegionsByLevelRequest.Parser, new[]{ "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindRegionsByLevelResponse), global::Leading.Services.FindRegionsByLevelResponse.Parser, new[]{ "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.Region), global::Leading.Services.Region.Parser, new[]{ "Id", "Code", "ParentCode", "Name", "Level", "CodeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindAllRegionsRequest), global::Leading.Services.FindAllRegionsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindAllRegionsResponse), global::Leading.Services.FindAllRegionsResponse.Parser, new[]{ "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.Address), global::Leading.Services.Address.Parser, new[]{ "Id", "ProvinceCode", "ProvinceName", "CityCode", "CityName", "DistrictCode", "DistrictName", "Street", "Zip", "ContactTelephone", "ContactName", "CodeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.RemoveAddressRequest), global::Leading.Services.RemoveAddressRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.RemoveAddressResponse), global::Leading.Services.RemoveAddressResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindRegionsBySkuIdRequest), global::Leading.Services.FindRegionsBySkuIdRequest.Parser, new[]{ "SkuId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Leading.Services.FindRegionsBySkuIdResponse), global::Leading.Services.FindRegionsBySkuIdResponse.Parser, new[]{ "Region" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FindRegionsByLevelRequest : pb::IMessage<FindRegionsByLevelRequest> {
    private static readonly pb::MessageParser<FindRegionsByLevelRequest> _parser = new pb::MessageParser<FindRegionsByLevelRequest>(() => new FindRegionsByLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindRegionsByLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelRequest(FindRegionsByLevelRequest other) : this() {
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelRequest Clone() {
      return new FindRegionsByLevelRequest(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindRegionsByLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindRegionsByLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindRegionsByLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindRegionsByLevelResponse : pb::IMessage<FindRegionsByLevelResponse> {
    private static readonly pb::MessageParser<FindRegionsByLevelResponse> _parser = new pb::MessageParser<FindRegionsByLevelResponse>(() => new FindRegionsByLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindRegionsByLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelResponse(FindRegionsByLevelResponse other) : this() {
      region_ = other.region_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsByLevelResponse Clone() {
      return new FindRegionsByLevelResponse(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Leading.Services.Region> _repeated_region_codec
        = pb::FieldCodec.ForMessage(10, global::Leading.Services.Region.Parser);
    private readonly pbc::RepeatedField<global::Leading.Services.Region> region_ = new pbc::RepeatedField<global::Leading.Services.Region>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Leading.Services.Region> Region {
      get { return region_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindRegionsByLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindRegionsByLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!region_.Equals(other.region_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= region_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      region_.WriteTo(output, _repeated_region_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += region_.CalculateSize(_repeated_region_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindRegionsByLevelResponse other) {
      if (other == null) {
        return;
      }
      region_.Add(other.region_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            region_.AddEntriesFrom(input, _repeated_region_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Region : pb::IMessage<Region> {
    private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Region> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region(Region other) : this() {
      id_ = other.id_;
      code_ = other.code_;
      parentCode_ = other.parentCode_;
      name_ = other.name_;
      level_ = other.level_;
      codeType_ = other.codeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region Clone() {
      return new Region(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentCode" field.</summary>
    public const int ParentCodeFieldNumber = 3;
    private string parentCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentCode {
      get { return parentCode_; }
      set {
        parentCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "codeType" field.</summary>
    public const int CodeTypeFieldNumber = 6;
    private int codeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CodeType {
      get { return codeType_; }
      set {
        codeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Region);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Region other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (ParentCode != other.ParentCode) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (CodeType != other.CodeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (ParentCode.Length != 0) hash ^= ParentCode.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CodeType != 0) hash ^= CodeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (ParentCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentCode);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (CodeType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CodeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (ParentCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentCode);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (CodeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Region other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.ParentCode.Length != 0) {
        ParentCode = other.ParentCode;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CodeType != 0) {
        CodeType = other.CodeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            ParentCode = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            CodeType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindAllRegionsRequest : pb::IMessage<FindAllRegionsRequest> {
    private static readonly pb::MessageParser<FindAllRegionsRequest> _parser = new pb::MessageParser<FindAllRegionsRequest>(() => new FindAllRegionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindAllRegionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsRequest(FindAllRegionsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsRequest Clone() {
      return new FindAllRegionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindAllRegionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindAllRegionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindAllRegionsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FindAllRegionsResponse : pb::IMessage<FindAllRegionsResponse> {
    private static readonly pb::MessageParser<FindAllRegionsResponse> _parser = new pb::MessageParser<FindAllRegionsResponse>(() => new FindAllRegionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindAllRegionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsResponse(FindAllRegionsResponse other) : this() {
      region_ = other.region_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindAllRegionsResponse Clone() {
      return new FindAllRegionsResponse(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Leading.Services.Region> _repeated_region_codec
        = pb::FieldCodec.ForMessage(10, global::Leading.Services.Region.Parser);
    private readonly pbc::RepeatedField<global::Leading.Services.Region> region_ = new pbc::RepeatedField<global::Leading.Services.Region>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Leading.Services.Region> Region {
      get { return region_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindAllRegionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindAllRegionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!region_.Equals(other.region_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= region_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      region_.WriteTo(output, _repeated_region_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += region_.CalculateSize(_repeated_region_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindAllRegionsResponse other) {
      if (other == null) {
        return;
      }
      region_.Add(other.region_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            region_.AddEntriesFrom(input, _repeated_region_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      id_ = other.id_;
      provinceCode_ = other.provinceCode_;
      provinceName_ = other.provinceName_;
      cityCode_ = other.cityCode_;
      cityName_ = other.cityName_;
      districtCode_ = other.districtCode_;
      districtName_ = other.districtName_;
      street_ = other.street_;
      zip_ = other.zip_;
      contactTelephone_ = other.contactTelephone_;
      contactName_ = other.contactName_;
      codeType_ = other.codeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "provinceCode" field.</summary>
    public const int ProvinceCodeFieldNumber = 2;
    private string provinceCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProvinceCode {
      get { return provinceCode_; }
      set {
        provinceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "provinceName" field.</summary>
    public const int ProvinceNameFieldNumber = 3;
    private string provinceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProvinceName {
      get { return provinceName_; }
      set {
        provinceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cityCode" field.</summary>
    public const int CityCodeFieldNumber = 4;
    private string cityCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityCode {
      get { return cityCode_; }
      set {
        cityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cityName" field.</summary>
    public const int CityNameFieldNumber = 5;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "districtCode" field.</summary>
    public const int DistrictCodeFieldNumber = 6;
    private string districtCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistrictCode {
      get { return districtCode_; }
      set {
        districtCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "districtName" field.</summary>
    public const int DistrictNameFieldNumber = 7;
    private string districtName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistrictName {
      get { return districtName_; }
      set {
        districtName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "street" field.</summary>
    public const int StreetFieldNumber = 8;
    private string street_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Street {
      get { return street_; }
      set {
        street_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zip" field.</summary>
    public const int ZipFieldNumber = 9;
    private string zip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zip {
      get { return zip_; }
      set {
        zip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contactTelephone" field.</summary>
    public const int ContactTelephoneFieldNumber = 10;
    private string contactTelephone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactTelephone {
      get { return contactTelephone_; }
      set {
        contactTelephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contactName" field.</summary>
    public const int ContactNameFieldNumber = 11;
    private string contactName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactName {
      get { return contactName_; }
      set {
        contactName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "codeType" field.</summary>
    public const int CodeTypeFieldNumber = 12;
    private string codeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CodeType {
      get { return codeType_; }
      set {
        codeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProvinceCode != other.ProvinceCode) return false;
      if (ProvinceName != other.ProvinceName) return false;
      if (CityCode != other.CityCode) return false;
      if (CityName != other.CityName) return false;
      if (DistrictCode != other.DistrictCode) return false;
      if (DistrictName != other.DistrictName) return false;
      if (Street != other.Street) return false;
      if (Zip != other.Zip) return false;
      if (ContactTelephone != other.ContactTelephone) return false;
      if (ContactName != other.ContactName) return false;
      if (CodeType != other.CodeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ProvinceCode.Length != 0) hash ^= ProvinceCode.GetHashCode();
      if (ProvinceName.Length != 0) hash ^= ProvinceName.GetHashCode();
      if (CityCode.Length != 0) hash ^= CityCode.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (DistrictCode.Length != 0) hash ^= DistrictCode.GetHashCode();
      if (DistrictName.Length != 0) hash ^= DistrictName.GetHashCode();
      if (Street.Length != 0) hash ^= Street.GetHashCode();
      if (Zip.Length != 0) hash ^= Zip.GetHashCode();
      if (ContactTelephone.Length != 0) hash ^= ContactTelephone.GetHashCode();
      if (ContactName.Length != 0) hash ^= ContactName.GetHashCode();
      if (CodeType.Length != 0) hash ^= CodeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ProvinceCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProvinceCode);
      }
      if (ProvinceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProvinceName);
      }
      if (CityCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CityCode);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CityName);
      }
      if (DistrictCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DistrictCode);
      }
      if (DistrictName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DistrictName);
      }
      if (Street.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Street);
      }
      if (Zip.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Zip);
      }
      if (ContactTelephone.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ContactTelephone);
      }
      if (ContactName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ContactName);
      }
      if (CodeType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CodeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ProvinceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvinceCode);
      }
      if (ProvinceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvinceName);
      }
      if (CityCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityCode);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (DistrictCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistrictCode);
      }
      if (DistrictName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistrictName);
      }
      if (Street.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
      }
      if (Zip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zip);
      }
      if (ContactTelephone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactTelephone);
      }
      if (ContactName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactName);
      }
      if (CodeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CodeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ProvinceCode.Length != 0) {
        ProvinceCode = other.ProvinceCode;
      }
      if (other.ProvinceName.Length != 0) {
        ProvinceName = other.ProvinceName;
      }
      if (other.CityCode.Length != 0) {
        CityCode = other.CityCode;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.DistrictCode.Length != 0) {
        DistrictCode = other.DistrictCode;
      }
      if (other.DistrictName.Length != 0) {
        DistrictName = other.DistrictName;
      }
      if (other.Street.Length != 0) {
        Street = other.Street;
      }
      if (other.Zip.Length != 0) {
        Zip = other.Zip;
      }
      if (other.ContactTelephone.Length != 0) {
        ContactTelephone = other.ContactTelephone;
      }
      if (other.ContactName.Length != 0) {
        ContactName = other.ContactName;
      }
      if (other.CodeType.Length != 0) {
        CodeType = other.CodeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ProvinceCode = input.ReadString();
            break;
          }
          case 26: {
            ProvinceName = input.ReadString();
            break;
          }
          case 34: {
            CityCode = input.ReadString();
            break;
          }
          case 42: {
            CityName = input.ReadString();
            break;
          }
          case 50: {
            DistrictCode = input.ReadString();
            break;
          }
          case 58: {
            DistrictName = input.ReadString();
            break;
          }
          case 66: {
            Street = input.ReadString();
            break;
          }
          case 74: {
            Zip = input.ReadString();
            break;
          }
          case 82: {
            ContactTelephone = input.ReadString();
            break;
          }
          case 90: {
            ContactName = input.ReadString();
            break;
          }
          case 98: {
            CodeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveAddressRequest : pb::IMessage<RemoveAddressRequest> {
    private static readonly pb::MessageParser<RemoveAddressRequest> _parser = new pb::MessageParser<RemoveAddressRequest>(() => new RemoveAddressRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressRequest(RemoveAddressRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressRequest Clone() {
      return new RemoveAddressRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveAddressResponse : pb::IMessage<RemoveAddressResponse> {
    private static readonly pb::MessageParser<RemoveAddressResponse> _parser = new pb::MessageParser<RemoveAddressResponse>(() => new RemoveAddressResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressResponse(RemoveAddressResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAddressResponse Clone() {
      return new RemoveAddressResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindRegionsBySkuIdRequest : pb::IMessage<FindRegionsBySkuIdRequest> {
    private static readonly pb::MessageParser<FindRegionsBySkuIdRequest> _parser = new pb::MessageParser<FindRegionsBySkuIdRequest>(() => new FindRegionsBySkuIdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindRegionsBySkuIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdRequest(FindRegionsBySkuIdRequest other) : this() {
      skuId_ = other.skuId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdRequest Clone() {
      return new FindRegionsBySkuIdRequest(this);
    }

    /// <summary>Field number for the "sku_id" field.</summary>
    public const int SkuIdFieldNumber = 1;
    private int skuId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkuId {
      get { return skuId_; }
      set {
        skuId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindRegionsBySkuIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindRegionsBySkuIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkuId != other.SkuId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkuId != 0) hash ^= SkuId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkuId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkuId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkuId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkuId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindRegionsBySkuIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.SkuId != 0) {
        SkuId = other.SkuId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkuId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindRegionsBySkuIdResponse : pb::IMessage<FindRegionsBySkuIdResponse> {
    private static readonly pb::MessageParser<FindRegionsBySkuIdResponse> _parser = new pb::MessageParser<FindRegionsBySkuIdResponse>(() => new FindRegionsBySkuIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindRegionsBySkuIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Leading.Services.RegionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdResponse(FindRegionsBySkuIdResponse other) : this() {
      region_ = other.region_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindRegionsBySkuIdResponse Clone() {
      return new FindRegionsBySkuIdResponse(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Leading.Services.Region> _repeated_region_codec
        = pb::FieldCodec.ForMessage(10, global::Leading.Services.Region.Parser);
    private readonly pbc::RepeatedField<global::Leading.Services.Region> region_ = new pbc::RepeatedField<global::Leading.Services.Region>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Leading.Services.Region> Region {
      get { return region_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindRegionsBySkuIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindRegionsBySkuIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!region_.Equals(other.region_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= region_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      region_.WriteTo(output, _repeated_region_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += region_.CalculateSize(_repeated_region_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindRegionsBySkuIdResponse other) {
      if (other == null) {
        return;
      }
      region_.Add(other.region_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            region_.AddEntriesFrom(input, _repeated_region_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
