// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: region.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Leading.Services {
  public static partial class RegionService
  {
    static readonly string __ServiceName = "Leading.Services.RegionService";

    static readonly grpc::Marshaller<global::Leading.Services.FindRegionsByLevelRequest> __Marshaller_FindRegionsByLevelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindRegionsByLevelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.FindRegionsByLevelResponse> __Marshaller_FindRegionsByLevelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindRegionsByLevelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.FindAllRegionsRequest> __Marshaller_FindAllRegionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindAllRegionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.FindAllRegionsResponse> __Marshaller_FindAllRegionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindAllRegionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.Address> __Marshaller_Address = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.Address.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.RemoveAddressRequest> __Marshaller_RemoveAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.RemoveAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.RemoveAddressResponse> __Marshaller_RemoveAddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.RemoveAddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.FindRegionsBySkuIdRequest> __Marshaller_FindRegionsBySkuIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindRegionsBySkuIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Leading.Services.FindRegionsBySkuIdResponse> __Marshaller_FindRegionsBySkuIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Leading.Services.FindRegionsBySkuIdResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Leading.Services.FindRegionsByLevelRequest, global::Leading.Services.FindRegionsByLevelResponse> __Method_FindRegionsByLevel = new grpc::Method<global::Leading.Services.FindRegionsByLevelRequest, global::Leading.Services.FindRegionsByLevelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindRegionsByLevel",
        __Marshaller_FindRegionsByLevelRequest,
        __Marshaller_FindRegionsByLevelResponse);

    static readonly grpc::Method<global::Leading.Services.FindAllRegionsRequest, global::Leading.Services.FindAllRegionsResponse> __Method_FindAllRegions = new grpc::Method<global::Leading.Services.FindAllRegionsRequest, global::Leading.Services.FindAllRegionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindAllRegions",
        __Marshaller_FindAllRegionsRequest,
        __Marshaller_FindAllRegionsResponse);

    static readonly grpc::Method<global::Leading.Services.Address, global::Leading.Services.Address> __Method_CreateAddress = new grpc::Method<global::Leading.Services.Address, global::Leading.Services.Address>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAddress",
        __Marshaller_Address,
        __Marshaller_Address);

    static readonly grpc::Method<global::Leading.Services.Address, global::Leading.Services.Address> __Method_UpdateAddress = new grpc::Method<global::Leading.Services.Address, global::Leading.Services.Address>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAddress",
        __Marshaller_Address,
        __Marshaller_Address);

    static readonly grpc::Method<global::Leading.Services.RemoveAddressRequest, global::Leading.Services.RemoveAddressResponse> __Method_RemoveAddress = new grpc::Method<global::Leading.Services.RemoveAddressRequest, global::Leading.Services.RemoveAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAddress",
        __Marshaller_RemoveAddressRequest,
        __Marshaller_RemoveAddressResponse);

    static readonly grpc::Method<global::Leading.Services.FindRegionsBySkuIdRequest, global::Leading.Services.FindRegionsBySkuIdResponse> __Method_FindRegionsBySkuId = new grpc::Method<global::Leading.Services.FindRegionsBySkuIdRequest, global::Leading.Services.FindRegionsBySkuIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindRegionsBySkuId",
        __Marshaller_FindRegionsBySkuIdRequest,
        __Marshaller_FindRegionsBySkuIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Leading.Services.RegionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RegionService</summary>
    public abstract partial class RegionServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.FindRegionsByLevelResponse> FindRegionsByLevel(global::Leading.Services.FindRegionsByLevelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.FindAllRegionsResponse> FindAllRegions(global::Leading.Services.FindAllRegionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.Address> CreateAddress(global::Leading.Services.Address request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.Address> UpdateAddress(global::Leading.Services.Address request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.RemoveAddressResponse> RemoveAddress(global::Leading.Services.RemoveAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Leading.Services.FindRegionsBySkuIdResponse> FindRegionsBySkuId(global::Leading.Services.FindRegionsBySkuIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionService</summary>
    public partial class RegionServiceClient : grpc::ClientBase<RegionServiceClient>
    {
      /// <summary>Creates a new client for RegionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Leading.Services.FindRegionsByLevelResponse FindRegionsByLevel(global::Leading.Services.FindRegionsByLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindRegionsByLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.FindRegionsByLevelResponse FindRegionsByLevel(global::Leading.Services.FindRegionsByLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindRegionsByLevel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindRegionsByLevelResponse> FindRegionsByLevelAsync(global::Leading.Services.FindRegionsByLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindRegionsByLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindRegionsByLevelResponse> FindRegionsByLevelAsync(global::Leading.Services.FindRegionsByLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindRegionsByLevel, null, options, request);
      }
      public virtual global::Leading.Services.FindAllRegionsResponse FindAllRegions(global::Leading.Services.FindAllRegionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindAllRegions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.FindAllRegionsResponse FindAllRegions(global::Leading.Services.FindAllRegionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindAllRegions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindAllRegionsResponse> FindAllRegionsAsync(global::Leading.Services.FindAllRegionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindAllRegionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindAllRegionsResponse> FindAllRegionsAsync(global::Leading.Services.FindAllRegionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindAllRegions, null, options, request);
      }
      public virtual global::Leading.Services.Address CreateAddress(global::Leading.Services.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.Address CreateAddress(global::Leading.Services.Address request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.Address> CreateAddressAsync(global::Leading.Services.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.Address> CreateAddressAsync(global::Leading.Services.Address request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAddress, null, options, request);
      }
      public virtual global::Leading.Services.Address UpdateAddress(global::Leading.Services.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.Address UpdateAddress(global::Leading.Services.Address request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.Address> UpdateAddressAsync(global::Leading.Services.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.Address> UpdateAddressAsync(global::Leading.Services.Address request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAddress, null, options, request);
      }
      public virtual global::Leading.Services.RemoveAddressResponse RemoveAddress(global::Leading.Services.RemoveAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.RemoveAddressResponse RemoveAddress(global::Leading.Services.RemoveAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.RemoveAddressResponse> RemoveAddressAsync(global::Leading.Services.RemoveAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.RemoveAddressResponse> RemoveAddressAsync(global::Leading.Services.RemoveAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAddress, null, options, request);
      }
      public virtual global::Leading.Services.FindRegionsBySkuIdResponse FindRegionsBySkuId(global::Leading.Services.FindRegionsBySkuIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindRegionsBySkuId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Leading.Services.FindRegionsBySkuIdResponse FindRegionsBySkuId(global::Leading.Services.FindRegionsBySkuIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindRegionsBySkuId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindRegionsBySkuIdResponse> FindRegionsBySkuIdAsync(global::Leading.Services.FindRegionsBySkuIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindRegionsBySkuIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Leading.Services.FindRegionsBySkuIdResponse> FindRegionsBySkuIdAsync(global::Leading.Services.FindRegionsBySkuIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindRegionsBySkuId, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_FindRegionsByLevel, serviceImpl.FindRegionsByLevel)
          .AddMethod(__Method_FindAllRegions, serviceImpl.FindAllRegions)
          .AddMethod(__Method_CreateAddress, serviceImpl.CreateAddress)
          .AddMethod(__Method_UpdateAddress, serviceImpl.UpdateAddress)
          .AddMethod(__Method_RemoveAddress, serviceImpl.RemoveAddress)
          .AddMethod(__Method_FindRegionsBySkuId, serviceImpl.FindRegionsBySkuId).Build();
    }

  }
}
#endregion
